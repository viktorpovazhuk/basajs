{"ast":null,"code":"var _jsxFileName = \"/home/lajob/ucu/web/ReactProject/herokuVersion/frontend/src/components/multiplayer/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport UserSpace from './UserSpace';\nimport ChatSpace from './ChatSpace';\nimport MultiplayerContext from './MultiplayerContext';\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const [personalQuestions, setPersonalQuestions] = useState([]);\n  const [personalGuesses, setPersonalGuesses] = useState([]);\n  const [phase, setPhase] = useState('null');\n  const [otherQuestions, setOtherQuestions] = useState([]);\n  const [inputType, setInputType] = useState({\n    type: ''\n  });\n  const [hp, setHP] = useState(10);\n  const [phaseEndDate, setPhaseEndDate] = useState(new Date());\n  const [isUserSpaceFormEnabled, setIsUserSpaceFormEnabled] = useState(false);\n  const {\n    username,\n    setSocketConfiguredForGame,\n    socketConfiguredForGame,\n    roomFull\n  } = useContext(MultiplayerContext);\n\n  const setSockets = () => {\n    socket.on('inputState', () => {\n      console.log(\"Got inputState\");\n      setOtherQuestions([]);\n      let newDate = new Date();\n      newDate.setTime(newDate.getTime() + 30 * Math.pow(10, 3));\n      setPhaseEndDate(() => newDate);\n      setPhase(\"input\");\n      setIsUserSpaceFormEnabled(true);\n    });\n    socket.on('voteState', () => {\n      console.log(\"Got voteState\");\n      let newDate = new Date();\n      newDate.setTime(newDate.getTime() + 30 * Math.pow(10, 3));\n      setPhaseEndDate(() => newDate);\n      setPhase(\"vote\");\n    });\n    socket.on('otherQuestion', question => {\n      console.log(`Got otherQuestion`);\n      console.log(question);\n      let questionWithVotes = { ...question,\n        yes: 0,\n        no: 0\n      };\n\n      if (username === question.username) {\n        setPersonalQuestions(prevPersonalQuestions => [...prevPersonalQuestions, questionWithVotes]);\n      } else {\n        setOtherQuestions(prevOtherQuestions => [...prevOtherQuestions, questionWithVotes]);\n      }\n    });\n    socket.on('guessResult', _ref2 => {\n      let {\n        correct,\n        hp,\n        text\n      } = _ref2;\n      console.log(\"Got guessResult\");\n      console.log(`text: ${text}`);\n      setHP(hp);\n      setPersonalGuesses(prevPersonalGuesses => [...prevPersonalGuesses, {\n        correct,\n        text\n      }]);\n    });\n    socket.on('otherVote', vote => {\n      console.log(\"Got otherVote\");\n      setPersonalQuestions(prevPersonalQuestions => {\n        console.log(`personalQuestions:`);\n        console.log(prevPersonalQuestions);\n        let newPersonalQuestions = [...prevPersonalQuestions];\n        let question = newPersonalQuestions.find(question => question.questionId === vote.questionId);\n\n        if (question === undefined) {\n          return prevPersonalQuestions;\n        }\n\n        if (vote.voteType === 'positive') {\n          question.yes += 1;\n        } else {\n          question.no += 1;\n        }\n\n        return newPersonalQuestions;\n      });\n      setOtherQuestions(prevOtherQuestions => {\n        console.log(`otherQuestions:`);\n        console.log(prevOtherQuestions);\n        let newOtherQuestions = [...prevOtherQuestions];\n        let question = newOtherQuestions.find(question => question.questionId === vote.questionId);\n\n        if (question === undefined) {\n          return prevOtherQuestions;\n        }\n\n        if (vote.voteType === 'positive') {\n          question.yes += 1;\n        } else {\n          question.no += 1;\n        }\n\n        return newOtherQuestions;\n      });\n    });\n    socket.on(\"endState\", roomId => {\n      console.log(\"Got endState\");\n      socket.emit(\"leaveRoom\", roomId);\n    });\n    setSocketConfiguredForGame(true);\n  };\n\n  useEffect(setSockets, []);\n\n  const postQuestionHandler = (fieldValue, setFieldValue) => {\n    if (fieldValue) {\n      socket.emit(\"question\", fieldValue);\n      setFieldValue('');\n      setIsUserSpaceFormEnabled(false);\n    }\n  };\n\n  const guessHandler = (fieldValue, setFieldValue) => {\n    if (fieldValue) {\n      socket.emit(\"guess\", fieldValue);\n      setFieldValue('');\n      setIsUserSpaceFormEnabled(false);\n    }\n  };\n\n  if (socketConfiguredForGame && roomFull) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Content\",\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        targetDate: phaseEndDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"HPSection\",\n        children: [\"HP: \", hp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UserSpace, {\n        personalQuestions: personalQuestions,\n        personalGuesses: personalGuesses,\n        isEnabled: phase === 'input',\n        isFormEnabled: isUserSpaceFormEnabled,\n        socket: socket,\n        postQuestionHandler: postQuestionHandler,\n        guessHandler: guessHandler,\n        inputProps: {\n          type: inputType.type,\n          typeSetter: setInputType\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChatSpace, {\n        isEnabled: phase === 'vote',\n        otherQuestions: otherQuestions,\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Game, \"f3Qn+5fgiJoprX8AFRHfHNN8YvQ=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useContext","useEffect","useState","UserSpace","ChatSpace","MultiplayerContext","Timer","Game","socket","personalQuestions","setPersonalQuestions","personalGuesses","setPersonalGuesses","phase","setPhase","otherQuestions","setOtherQuestions","inputType","setInputType","type","hp","setHP","phaseEndDate","setPhaseEndDate","Date","isUserSpaceFormEnabled","setIsUserSpaceFormEnabled","username","setSocketConfiguredForGame","socketConfiguredForGame","roomFull","setSockets","on","console","log","newDate","setTime","getTime","Math","pow","question","questionWithVotes","yes","no","prevPersonalQuestions","prevOtherQuestions","correct","text","prevPersonalGuesses","vote","newPersonalQuestions","find","questionId","undefined","voteType","newOtherQuestions","roomId","emit","postQuestionHandler","fieldValue","setFieldValue","guessHandler","typeSetter"],"sources":["/home/lajob/ucu/web/ReactProject/herokuVersion/frontend/src/components/multiplayer/Game.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport UserSpace from './UserSpace'\nimport ChatSpace from './ChatSpace'\nimport MultiplayerContext from './MultiplayerContext';\nimport Timer from './Timer'\n\nconst Game = ({ socket }) => {\n    const [personalQuestions, setPersonalQuestions] = useState([]);\n    const [personalGuesses, setPersonalGuesses] = useState([]);\n    const [phase, setPhase] = useState('null');\n    const [otherQuestions, setOtherQuestions] = useState([]);\n    const [inputType, setInputType] = useState({ type: '' });\n    const [hp, setHP] = useState(10);\n    const [phaseEndDate, setPhaseEndDate] = useState(new Date());\n    const [isUserSpaceFormEnabled, setIsUserSpaceFormEnabled] = useState(false);\n\n    const { username, setSocketConfiguredForGame, socketConfiguredForGame, roomFull } = useContext(MultiplayerContext);\n\n    const setSockets = () => {\n        socket.on('inputState', () => {\n            console.log(\"Got inputState\");\n            setOtherQuestions([]);\n            let newDate = new Date();\n            newDate.setTime(newDate.getTime() + 30 * Math.pow(10, 3));\n            setPhaseEndDate(() => newDate);\n            setPhase(\"input\");\n            setIsUserSpaceFormEnabled(true);\n        });\n        socket.on('voteState', () => {\n            console.log(\"Got voteState\");\n            let newDate = new Date();\n            newDate.setTime(newDate.getTime() + 30 * Math.pow(10, 3));\n            setPhaseEndDate(() => newDate);\n            setPhase(\"vote\");\n        });\n        socket.on('otherQuestion', (question) => {\n            console.log(`Got otherQuestion`);\n            console.log(question);\n            let questionWithVotes = { ...question, yes: 0, no: 0 };\n            if (username === question.username) {\n                setPersonalQuestions((prevPersonalQuestions) => [...prevPersonalQuestions, questionWithVotes]);\n            } else {\n                setOtherQuestions((prevOtherQuestions) => [...prevOtherQuestions, questionWithVotes]);\n            }\n        });\n        socket.on('guessResult', ({ correct, hp, text }) => {\n            console.log(\"Got guessResult\");\n            console.log(`text: ${text}`);\n            setHP(hp);\n            setPersonalGuesses((prevPersonalGuesses) => [...prevPersonalGuesses, { correct, text }]);\n        });\n        socket.on('otherVote', (vote) => {\n            console.log(\"Got otherVote\")\n            setPersonalQuestions((prevPersonalQuestions) => {\n                console.log(`personalQuestions:`);\n                console.log(prevPersonalQuestions);\n                let newPersonalQuestions = [...prevPersonalQuestions];\n                let question = newPersonalQuestions.find((question) => question.questionId === vote.questionId);\n                if (question === undefined) {\n                    return prevPersonalQuestions;\n                }\n                if (vote.voteType === 'positive') {\n                    question.yes += 1;\n                } else {\n                    question.no += 1;\n                }\n                return newPersonalQuestions;\n            });\n            setOtherQuestions((prevOtherQuestions) => {\n                console.log(`otherQuestions:`);\n                console.log(prevOtherQuestions);\n                let newOtherQuestions = [...prevOtherQuestions];\n                let question = newOtherQuestions.find((question) => question.questionId === vote.questionId);\n                if (question === undefined) {\n                    return prevOtherQuestions;\n                }\n                if (vote.voteType === 'positive') {\n                    question.yes += 1;\n                } else {\n                    question.no += 1;\n                }\n                return newOtherQuestions;\n            });\n        });\n        socket.on(\"endState\", (roomId) => {\n            console.log(\"Got endState\");\n            socket.emit(\"leaveRoom\", roomId);\n        });\n        setSocketConfiguredForGame(true);\n    }\n\n    useEffect(setSockets, []);\n\n    const postQuestionHandler = (fieldValue, setFieldValue) => {\n        if (fieldValue) {\n            socket.emit(\"question\", fieldValue);\n            setFieldValue('');\n            setIsUserSpaceFormEnabled(false);\n        }\n    }\n\n    const guessHandler = (fieldValue, setFieldValue) => {\n        if (fieldValue) {\n            socket.emit(\"guess\", fieldValue);\n            setFieldValue('');\n            setIsUserSpaceFormEnabled(false);\n        }\n    }\n\n    if (socketConfiguredForGame && roomFull) {\n        return (\n            <div className=\"Content\">\n                <Timer targetDate={phaseEndDate} />\n                <div className=\"HPSection\">HP: {hp}</div>\n                <UserSpace\n                    personalQuestions={personalQuestions}\n                    personalGuesses={personalGuesses}\n                    isEnabled={phase === 'input'}\n                    isFormEnabled={isUserSpaceFormEnabled}\n                    socket={socket}\n                    postQuestionHandler={postQuestionHandler}\n                    guessHandler={guessHandler}\n                    inputProps={{ type: inputType.type, typeSetter: setInputType }}\n                />\n                <ChatSpace isEnabled={phase === 'vote'} otherQuestions={otherQuestions} socket={socket} />\n            </div>\n        );\n    }\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}